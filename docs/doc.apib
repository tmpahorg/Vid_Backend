FORMAT: 1A
HOST: localhost:3344/

# vid backend (1.2)

Vid backend built by golang/gin

[Terms of service](https://github.com/vidorg/vid_backend/issues)

[License: MIT](https://github.com/vidorg/vid_backend/blob/master/LICENSE)

[vidorg - Website](https://github.com/vidorg)

# Group Authorization

auth-controller

## register [/v1/auth/register]

### register [POST]

`POST /v1/auth/register`

+ Request (application/json)

    + Attributes (RegisterParam)

    + Headers

    + Body

+ Response 201 (application/json)

    + Attributes (Result)

    + Headers

    + Body

## login [/v1/auth/login]

### login [POST]

`POST /v1/auth/login`

+ Request (application/json)

    + Attributes (LoginParam)

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<LoginDto>)

    + Headers

    + Body

## current user [/v1/auth/user]

### current user [GET]

`GET /v1/auth/user`

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<UserDto>)

    + Headers

    + Body

## logout [/v1/auth/logout]

### logout [DELETE]

`DELETE /v1/auth/logout`

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

## update password [/v1/auth/password]

### update password [PUT]

`PUT /v1/auth/password`

+ Request (application/json)

    + Attributes (UpdatePasswordParam)

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

## send email to activate account [/v1/auth/activate]

### send email to activate account [POST]

`POST /v1/auth/activate`

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

## activate account with spec [/v1/auth/spec/{spec}]

### activate account with spec [GET]

`GET /v1/auth/spec/{spec}`

+ Parameters

    + spec (string, required) - spec code

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

# Group User

user-controller

## query all user [/v1/user{?page,limit,order,need_follow_count,need_is_follow,need_video_count,need_favorite_count}]

### query all user [GET]

`GET /v1/user`

+ Parameters

    + page (number, optional) - current page
        (format: int32)
    + limit (number, optional) - page size
        (format: int32)
    + order (string, optional) - order string
    + need_follow_count (boolean, optional) - need follow count (user)
    + need_is_follow (boolean, optional) - need is follow (user)
    + need_video_count (boolean, optional) - need video count (user)
    + need_favorite_count (boolean, optional) - need favorite count (user)

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<UserDto>>)

    + Headers

    + Body

## query a user by uid [/v1/user/{uid}{?need_follow_count,need_is_follow,need_video_count,need_favorite_count}]

### query a user by uid [GET]

`GET /v1/user/{uid}`

+ Parameters

    + uid (number, required) - user id
        (format: int64)
    + need_follow_count (boolean, optional) - need follow count (user)
    + need_is_follow (boolean, optional) - need is follow (user)
    + need_video_count (boolean, optional) - need video count (user)
    + need_favorite_count (boolean, optional) - need favorite count (user)

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<UserDto>)

    + Headers

    + Body

## update a user, delete a user [/v1/user]

### update a user [PUT]

`PUT /v1/user`

+ Request (application/json)

    + Attributes (UpdateUserParam)

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

### delete a user [DELETE]

`DELETE /v1/user`

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

# Group Follow

follow-controller

## query user followers [/v1/user/{uid}/follower{?page,limit,order,need_follow_count,need_is_follow,need_video_count,need_favorite_count}]

### query user followers [GET]

`GET /v1/user/{uid}/follower`

+ Parameters

    + uid (number, required) - user id
        (format: int64)
    + page (number, optional) - current page
        (format: int32)
    + limit (number, optional) - page size
        (format: int32)
    + order (string, optional) - order string
    + need_follow_count (boolean, optional) - need follow count (user)
    + need_is_follow (boolean, optional) - need is follow (user)
    + need_video_count (boolean, optional) - need video count (user)
    + need_favorite_count (boolean, optional) - need favorite count (user)

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<UserDto>>)

    + Headers

    + Body

## query user followings [/v1/user/{uid}/following{?page,limit,order,need_follow_count,need_is_follow,need_video_count,need_favorite_count}]

### query user followings [GET]

`GET /v1/user/{uid}/following`

+ Parameters

    + uid (number, required) - user id
        (format: int64)
    + page (number, optional) - current page
        (format: int32)
    + limit (number, optional) - page size
        (format: int32)
    + order (string, optional) - order string
    + need_follow_count (boolean, optional) - need follow count (user)
    + need_is_follow (boolean, optional) - need is follow (user)
    + need_video_count (boolean, optional) - need video count (user)
    + need_favorite_count (boolean, optional) - need favorite count (user)

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<UserDto>>)

    + Headers

    + Body

## follow user, unfollow user [/v1/user/following/{uid}]

### follow user [POST]

`POST /v1/user/following/{uid}`

+ Parameters

    + uid (number, required) - user id
        (format: int64)

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

### unfollow user [DELETE]

`DELETE /v1/user/following/{uid}`

+ Parameters

    + uid (number, required) - user id
        (format: int64)

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

# Group Video

video-controller

## query all videos [/v1/video{?page,limit,order,need_author,need_favored_count,need_is_favorite,need_follow_count,need_is_follow,need_video_count,need_favorite_count}]

### query all videos [GET]

`GET /v1/video`

+ Parameters

    + page (number, optional) - current page
        (format: int32)
    + limit (number, optional) - page size
        (format: int32)
    + order (string, optional) - order string
    + need_author (boolean, optional) - need video author (video)
    + need_favored_count (boolean, optional) - need favored user count (video)
    + need_is_favorite (boolean, optional) - need is favorite (video)
    + need_follow_count (boolean, optional) - need follow count (user)
    + need_is_follow (boolean, optional) - need is follow (user)
    + need_video_count (boolean, optional) - need video count (user)
    + need_favorite_count (boolean, optional) - need favorite count (user)

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<VideoDto>>)

    + Headers

    + Body

## query videos from user [/v1/user/{uid}/video{?page,limit,order,need_author,need_favored_count,need_is_favorite,need_follow_count,need_is_follow,need_video_count,need_favorite_count}]

### query videos from user [GET]

`GET /v1/user/{uid}/video`

+ Parameters

    + uid (number, required) - user id
        (format: int64)
    + page (number, optional) - current page
        (format: int32)
    + limit (number, optional) - page size
        (format: int32)
    + order (string, optional) - order string
    + need_author (boolean, optional) - need video author (video)
    + need_favored_count (boolean, optional) - need favored user count (video)
    + need_is_favorite (boolean, optional) - need is favorite (video)
    + need_follow_count (boolean, optional) - need follow count (user)
    + need_is_follow (boolean, optional) - need is follow (user)
    + need_video_count (boolean, optional) - need video count (user)
    + need_favorite_count (boolean, optional) - need favorite count (user)

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<VideoDto>>)

    + Headers

    + Body

## query a video [/v1/video/{vid}{?need_author,need_favored_count,need_is_favorite,need_follow_count,need_is_follow,need_video_count,need_favorite_count}]

### query a video [GET]

`GET /v1/video/{vid}`

+ Parameters

    + vid (number, required) - video id
        (format: int64)
    + need_author (boolean, optional) - need video author (video)
    + need_favored_count (boolean, optional) - need favored user count (video)
    + need_is_favorite (boolean, optional) - need is favorite (video)
    + need_follow_count (boolean, optional) - need follow count (user)
    + need_is_follow (boolean, optional) - need is follow (user)
    + need_video_count (boolean, optional) - need video count (user)
    + need_favorite_count (boolean, optional) - need favorite count (user)

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<VideoDto>)

    + Headers

    + Body

## create a video [/v1/video]

### create a video [POST]

`POST /v1/video`

+ Request (application/json)

    + Attributes (InsertVideoParam)

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 201 (application/json)

    + Attributes (Result)

    + Headers

    + Body

## update a video, delete a video [/v1/video/{vid}]

### update a video [PUT]

`PUT /v1/video/{vid}`

+ Parameters

    + vid (number, required) - video id
        (format: int64)

+ Request (application/json)

    + Attributes (UpdateVideoParam)

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

### delete a video [DELETE]

`DELETE /v1/video/{vid}`

+ Parameters

    + vid (number, required) - video id
        (format: int64)

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

# Group Favorite

favorite-controller

## query user favorites [/v1/user/{uid}/favorite{?page,limit,order,need_author,need_favored_count,need_is_favorite,need_follow_count,need_is_follow,need_video_count,need_favorite_count}]

### query user favorites [GET]

`GET /v1/user/{uid}/favorite`

+ Parameters

    + uid (number, required) - user id
        (format: int64)
    + page (number, optional) - current page
        (format: int32)
    + limit (number, optional) - page size
        (format: int32)
    + order (string, optional) - order string
    + need_author (boolean, optional) - need video author (video)
    + need_favored_count (boolean, optional) - need favored user count (video)
    + need_is_favorite (boolean, optional) - need is favorite (video)
    + need_follow_count (boolean, optional) - need follow count (user)
    + need_is_follow (boolean, optional) - need is follow (user)
    + need_video_count (boolean, optional) - need video count (user)
    + need_favorite_count (boolean, optional) - need favorite count (user)

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<VideoDto>>)

    + Headers

    + Body

## query video favored users [/v1/video/{vid}/favored{?page,limit,order,need_follow_count,need_is_follow,need_video_count,need_favorite_count}]

### query video favored users [GET]

`GET /v1/video/{vid}/favored`

+ Parameters

    + vid (number, required) - vid id
        (format: int64)
    + page (number, optional) - current page
        (format: int32)
    + limit (number, optional) - page size
        (format: int32)
    + order (string, optional) - order string
    + need_follow_count (boolean, optional) - need follow count (user)
    + need_is_follow (boolean, optional) - need is follow (user)
    + need_video_count (boolean, optional) - need video count (user)
    + need_favorite_count (boolean, optional) - need favorite count (user)

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<UserDto>>)

    + Headers

    + Body

## add video to favorite, remove video from favorite [/v1/user/favorite/{vid}]

### add video to favorite [POST]

`POST /v1/user/favorite/{vid}`

+ Parameters

    + vid (number, required) - vid id
        (format: int64)

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

### remove video from favorite [DELETE]

`DELETE /v1/user/favorite/{vid}`

+ Parameters

    + vid (number, required) - vid id
        (format: int64)

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

# Group Channel

channel-controller

## query all channels [/v1/channel{?page,limit,order}]

### query all channels [GET]

`GET /v1/channel`

+ Parameters

    + page (number, optional) - current page
        (format: int32)
    + limit (number, optional) - page size
        (format: int32)
    + order (string, optional) - order string

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<ChannelDto>>)

    + Headers

    + Body

## query channels from user [/v1/user/{uid}/channel{?page,limit,order}]

### query channels from user [GET]

`GET /v1/user/{uid}/channel`

+ Parameters

    + uid (number, required) - user id
        (format: int64)
    + page (number, optional) - current page
        (format: int32)
    + limit (number, optional) - page size
        (format: int32)
    + order (string, optional) - order string

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<ChannelDto>>)

    + Headers

    + Body

## query a channel, update a channel, delete a channel [/v1/channel/{cid}]

### query a channel [GET]

`GET /v1/channel/{cid}`

+ Parameters

    + cid (number, required) - channel id
        (format: int64)

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<ChannelDto>)

    + Headers

    + Body

### update a channel [PUT]

`PUT /v1/channel/{cid}`

+ Parameters

    + cid (number, required) - channel id
        (format: int64)

+ Request (application/json)

    + Attributes (UpdateChannelParam)

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

### delete a channel [DELETE]

`DELETE /v1/channel/{cid}`

+ Parameters

    + cid (number, required) - channel id
        (format: int64)

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

## create a channel [/v1/channel]

### create a channel [POST]

`POST /v1/channel`

+ Request (application/json)

    + Attributes (InsertChannelParam)

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 201 (application/json)

    + Attributes (Result)

    + Headers

    + Body

# Group Rbac

rbac-controller

## Get rbac rules [/v1/rbac/rule{?page,limit}]

### Get rbac rules [GET]

`GET /v1/rbac/rule`

+ Parameters

    + page (number, optional) - current page
        (format: int32)
    + limit (number, optional) - page size
        (format: int32)

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<RbacRuleDto>>)

    + Headers

    + Body

## Change user role [/v1/rbac/user/{uid}]

### Change user role [PUT]

`PUT /v1/rbac/user/{uid}`

+ Parameters

    + uid (number, required) - user id
        (format: int64)

+ Request (application/json)

    + Attributes (ChangeUserRoleParam)

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

## Insert subject, Delete subject [/v1/rbac/subject]

### Insert subject [POST]

`POST /v1/rbac/subject`

+ Request (application/json)

    + Attributes (RbacSubjectParam)

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 201 (application/json)

    + Attributes (Result)

    + Headers

    + Body

### Delete subject [DELETE]

`DELETE /v1/rbac/subject`

+ Request (application/json)

    + Attributes (RbacSubjectParam)

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

## Insert policy, Delete policy [/v1/rbac/policy]

### Insert policy [POST]

`POST /v1/rbac/policy`

+ Request (application/json)

    + Attributes (RbacPolicyParam)

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 201 (application/json)

    + Attributes (Result)

    + Headers

    + Body

### Delete policy [DELETE]

`DELETE /v1/rbac/policy`

+ Request (application/json)

    + Attributes (RbacPolicyParam)

    + Headers

            Authorization: Jwt apiKey (string, optional)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

# Group Administration

*-controller

# Data Structures

## Result (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message

## ChannelDto (object)

+ cid (number, required) - channel id
    (format: int64)
+ name (string, required) - channel name
+ description (string, required) - channel description
+ cover_url (string, required) - channel cover url
+ author_uid (number, required) - channel author id
    (format: int64)
+ author (UserDto, required) - channel author
+ create_time (string, required) - channel upload time
    (format: date-time)
+ extra (ChannelExtraDto, required) - channel extra information

## ChannelExtraDto (object)

+ is_subscribed (number, required) - channel subscriber users count
    (format: int32)
+ is_subscribed (boolean, required) - this channel is subscribed by the authorized user

## RbacRuleDto (object)

+ p_type (string, required) - rule type
+ v0 (string, required) - v0
+ v1 (string, required) - v1
+ v2 (string, required) - v2
+ v3 (string, required) - v3
+ v4 (string, required) - v4
+ v5 (string, required) - v5

## UserDto (object)

+ uid (number, required) - user id
    (format: int64)
+ username (string, required) - username
+ email (string, required) - user email
+ nickname (string, required) - user nickname
+ gender (enum[string], required) - user gender
    + Members
        + `secret`
        + `male`
        + `female`
+ profile (string, required) - user profile
    (allow empty)
+ avatar (string, required) - user avatar
+ birthday (string, required) - user birthday
    (format: date)
+ role (string, required) - user role
+ state (string, required) - user state
+ register_time (string, required) - user register time
    (format: date-time)
+ extra (UserExtraDto, required) - user extra information

## UserExtraDto (object)

+ followings (number, required) - user following count
    (format: int32)
+ followers (number, required) - user follower count
    (format: int32)
+ is_following (boolean, required) - authorized user is following this user
+ is_followed (boolean, required) - authorized user is followed by this user
+ is_blocking (boolean, required) - authorized user is blocking this user
+ videos (number, required) - user video count
    (format: int32)
+ favorites (number, required) - user favorite count
    (format: int32)

## LoginDto (object)

+ user (UserDto, required) - authorized user
+ token (string, required) - access token

## VideoDto (object)

+ vid (number, required) - video id
    (format: int64)
+ title (string, required) - video title
+ description (string, required) - video description
+ video_url (string, required) - video source url
+ cover_url (string, required) - video cover url
+ author_uid (number, required) - video author id
    (format: int64)
+ author (UserDto, required) - video author
+ upload_time (string, required) - video upload time
    (format: date-time)
+ extra (VideoExtraDto, required) - video extra information

## VideoExtraDto (object)

+ favoreds (number, required) - video favored user count
    (format: int32)
+ is_favorite (boolean, required) - this video is favored by the authorized user

## RegisterParam (object)

+ email: `aaa@bbb.ccc` (string, required) - register email
+ username (string, required) - register username
+ password (string, required) - register password

## LoginParam (object)

+ parameter (string, required) - login parameter, support uid | username | email
+ password (string, required) - login password

## UpdatePasswordParam (object)

+ old (string, required) - old password
+ new (string, required) - new password

## InsertChannelParam (object)

+ name (string, required) - channel name
+ description (string, required) - channel description
+ cover_url: `https://aaa.bbb.ccc` (string, required) - channel cover url

## UpdateChannelParam (object)

+ name (string, required) - channel name
+ description (string, required) - channel description
+ cover_url: `https://aaa.bbb.ccc` (string, required) - channel cover url

## ChangeUserRoleParam (object)

+ sub (string, required) - new subject

## RbacSubjectParam (object)

+ new (string, required) - new subject
+ from (string, required) - subject inherited from

## RbacPolicyParam (object)

+ sub (string, required) - new subject
+ obj (string, required) - new object
+ act (string, required) - new action

## UpdateUserParam (object)

+ username (string, required) - username
+ nickname (string, required) - user nickname
+ gender (enum[number], required) - user gender, 0X | 1M | 2F
    (format: int32)
    + Members
        + `0`
        + `1`
        + `2`
+ profile (string, required) - user profile
    (allow empty)
+ birthday: `2000-01-01` (string, required) - user birthday
    (format: date)
+ avatar: `https://aaa.bbb.ccc` (string, required) - user avatar

## InsertVideoParam (object)

+ title (string, required) - video title
+ description (string, required) - video description
+ video_url: `https://aaa.bbb.ccc` (string, required) - video source url
+ cover_url: `https://aaa.bbb.ccc` (string, required) - video cover url

## UpdateVideoParam (object)

+ title (string, required) - video title
+ description (string, required) - video description
+ video_url: `https://aaa.bbb.ccc` (string, required) - video source url
+ cover_url: `https://aaa.bbb.ccc` (string, required) - video cover url

## _Result<LoginDto> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (LoginDto, required) - response data

## _Result<UserDto> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (UserDto, required) - response data

## _Result<_Page<ChannelDto>> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (_Page<ChannelDto>, required) - response data

## _Page<ChannelDto> (object)

+ page (number, required) - current page
    (format: int32)
+ limit (number, required) - page size
    (format: int32)
+ total (number, required) - data count
    (format: int32)
+ data (array[ChannelDto], required) - page data

## _Result<ChannelDto> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (ChannelDto, required) - response data

## _Result<_Page<VideoDto>> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (_Page<VideoDto>, required) - response data

## _Page<VideoDto> (object)

+ page (number, required) - current page
    (format: int32)
+ limit (number, required) - page size
    (format: int32)
+ total (number, required) - data count
    (format: int32)
+ data (array[VideoDto], required) - page data

## _Result<_Page<UserDto>> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (_Page<UserDto>, required) - response data

## _Page<UserDto> (object)

+ page (number, required) - current page
    (format: int32)
+ limit (number, required) - page size
    (format: int32)
+ total (number, required) - data count
    (format: int32)
+ data (array[UserDto], required) - page data

## _Result<_Page<RbacRuleDto>> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (_Page<RbacRuleDto>, required) - response data

## _Page<RbacRuleDto> (object)

+ page (number, required) - current page
    (format: int32)
+ limit (number, required) - page size
    (format: int32)
+ total (number, required) - data count
    (format: int32)
+ data (array[RbacRuleDto], required) - page data

## _Result<VideoDto> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (VideoDto, required) - response data
